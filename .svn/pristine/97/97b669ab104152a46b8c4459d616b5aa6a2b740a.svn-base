<!--搜索页面-->
<template>
  <div class="search-container">
    <Head @search="search" />
    <div class="search center">
      <div class="search-content">
        <div class="tags">
          <div class="tag-group">
            <div class="inline-block">标签：</div>
            <el-button
              v-model="checkAll"
              size="small"
              :type="isPrimary === true ? 'primary':''"
              @click="allTagsEvent"
            >
              全部
            </el-button>

            <el-button
              v-for="(item,index) in tagsData"
              :type="item.status === true ? 'primary': ''"
              @click="itemTagsEvent(index)"
            >
              {{ item.name }}
            </el-button>
          </div>
          <div class="tag-group">
            <div class="inline-block">分类：</div>
            <el-button
              v-for="(item,index) in classifyData"
              :type="item.status === true ? 'primary':'' "
              @click="classifyEvent(index)"
            >
              {{ item.name }}
            </el-button>
          </div>
        </div>
        <div class="comprehensive space-between">
          <div class="com-left">
            <div :class="[{ selectColor: isComTrue },fontSize12,floatLeft,marginRight20]" @click="comSortEvent">
              综合排序
            </div>
            <div :class="[{ selectColor: isUseTrue },fontSize12,floatLeft,marginRight20]">
              <span :class="[{ selectColor: isTrue }]" @click="useTypeEvent">使用量</span>
              <i v-show="useType" class="el-icon-caret-bottom" @click="useTypeEvent" />
              <i v-show="!useType" class="el-icon-caret-top" @click="useTypeEvent" />
            </div>
            <div :class="[{ selectColor: isTimeTrue },fontSize12,floatLeft,marginRight20]">
              <span @click="timeTypeEvent">上架时间</span>
              <i v-show="timeType" class="el-icon-caret-bottom" @click="timeTypeEvent" />
              <i v-show="!timeType" class="el-icon-caret-top" @click="timeTypeEvent" />
            </div>
          </div>
          <div class="com-right font-size12">
            共搜到机器人{{ robotSum }}个,技能{{ skillSum }}个
          </div>
        </div>
        <div class="robot-list">
          <ul class="list-content">
            <!--robot-item float-left-->
            <li v-for="(item,index) in robotList" :class="[ index % 2 === 0 ? margin : '',robotItem,floatLeft]">
              <div v-if="item.type === 0" class="triangle" />
              <div v-if="item.type === 0" class="triangle-icon">
                <img src="./../../assets/index/robot.png">
              </div>

              <div class="item-up">
                <div class="tag-group">
                  <el-tag
                    v-for="tagItem in item.listRS"
                    :key="tagItem.name"
                    effect="dark"
                  >
                    {{ tagItem.name }}
                  </el-tag>
                </div>
              </div>

              <div class="item-down">
                <div class="down-left">
                  <div class="block">
                    <el-carousel height="160px">
                      <el-carousel-item v-for="(picItem,index) in item.listPic" :key="index">
                        <!--<h3 class="small">{{ picItem.picUrl }}</h3>-->
                        <img style="width:100%;height: 100%;" :src="picItem.picUrl">
                      </el-carousel-item>
                    </el-carousel>

                    <!--<el-carousel height="150px">-->
                    <!--<el-carousel-item v-for="(picItem,index) in robotList" :key="index">-->
                    <!--<div style="height: 100%;background: red;">-->
                    <!--<img style="height: 100%;" src="https://www.baidu.com/img/bd_logo1.png" />-->
                    <!--</div>-->
                    <!--<img style="height: 100%;" src="https://www.baidu.com/img/bd_logo1.png" />-->
                    <!--</el-carousel-item>-->
                    <!--</el-carousel>-->

                  </div>
                </div>
                <div class="down-right">
                  <div @click="jumpDetailEvent(item)">
                    <h3 class="title">{{ item.name }}</h3>
                    <p class="right-content">{{ item.desc }}</p>
                  </div>
                  <div class="start space-between">
                    <div>
                      <el-rate v-model="value1" disabled />
                    </div>
                    <div class="use-count center font-size12">
                      使用数量：{{ item.useCount }}
                    </div>
                  </div>
                  <div class="status space-between">
                    <div class="red center">{{ item.price === 0 ? '免费': item.price }}</div>
                    <div>
                      <el-button
                        class="search-btn font-size12"
                        type="primary"
                        size="small"
                        @click.stop="imeDownLoad(item)"
                      >
                        {{ item.downCount?'已下载':'立即下载' }}
                      </el-button>
                    </div>
                  </div>

                  <!-- 右边放大区域 -->
                  <!--<div class="right_contanier" v-show="isBig">-->
                  <!--<img :src="middleImg" ref="bigImg" class="big_img" alt="">-->
                  <!--</div>-->
                </div>
              </div>

              <DiaLog
                v-if="item.type === 1"
                :title="title"
                :skillItem = "skillItem"
                :skillDiaVis="skillDiaVisData"
                @confirm="parentSkillYesEvent"
                @no="parentSkillNoEvent"
                @beforeClose="beforeCloseEvent"
              />
              <RobotDiaLog
                :nameTitle="nameTitle"
                :codeTitle="codeTitle"
                :robotTitle="robotTitle"
                :robotName="robotName"
                :robotCode="robotCode"
                :robotDiaVis="robotDiaVisData"
                @close="closeEvent"
                @robotBeforeClose="robotBeforeCloseEvent"
              />
            </li>
          </ul>
        </div>
        <div class="paging center">
          <el-pagination
            background
            :current-page="page.pageNum"
            :page-sizes="[10, 20, 30, 50]"
            :page-size="page.pageSize"
            layout="total, sizes, prev, pager, next, jumper"
            :total="page.totalCount"
            @size-change="handleSizeChange"
            @current-change="handleCurrentChange"
          />
        </div>
      </div>
    </div>
    <Foot />
  </div>
</template>

<script>
import Head from '@/views/comment/head.vue'
import Foot from '@/views/comment/foot.vue'
import { searchList, getTag } from './../../api/search'
import { allDownLoad } from '@/utils/index'
import {
  download,
  robotDownload
} from '@/api/index.js';
import DiaLog from '@/views/comment/dialog.vue';
import RobotDiaLog from '@/views/comment/robotDiaLog.vue';

export default {
  name: 'Search',
  components: {
    Head,
    DiaLog,
    RobotDiaLog,
    Foot
  },
  props: {
    msg: String
  },
  data() {
    return {
      useType: true,
      timeType: true,
      isComTrue: true,
      isUseTrue: false,
      isTimeTrue: false,

      isTrue: false,
      isTrueDown: false,
      fontSize12: 'font-size12',
      marginRight20: 'margin-right20',
      floatLeft: 'float-left',
      upArrow: 'up-arrow',
      elIconTop: 'el-icon-caret-top',
      downArrow: 'down-arrow',
      elIconBottom: 'el-icon-caret-bottom',
      page: {
        pageNum: 1,
        pageSize: 10,
        totalCount: 0
      },
      robotSum: 0,
      skillSum: 0,
      value1: 5,
      // type: 0, //0：只取机器人，1：只取技能
      useCount: '', // 默认为空，传值按照使用次数排序
      shelfTime: '', // 默认为空，传值按照上架时间排序
      list: [],
      tags: [],
      // selectTags: [1000,1001,1002,1003],
      selectTags: [],
      checkedTag: [],
      type: '',
      checkAll: false,
      isPrimary: true,
      isIndeterminate: true,
      classifys: [
        { name: '全部', bid: '' },
        { name: '机器人', bid: 0 },
        { name: '技能', bid: 1 }
      ],
      items: [
        { type: '', label: '标签一' },
        { type: '', label: '标签二' },
        { type: '', label: '标签三' },
        { type: '', label: '标签四' },
        { type: '', label: '标签五' }
      ],
      robotList: [],
      name: '',
      tagsData: [],
      tagsData1: [
        {
          name: '标签一',
          bid: 1000,
          status: false
        },
        {
          name: '标签二',
          bid: 1001,
          status: false
        },
        {
          name: '标签三',
          bid: 1002,
          status: false
        },
        {
          name: '标签四',
          bid: 1003,
          status: false
        }
      ],
      classifyData: [
        { name: '全部', bid: '', status: false },
        { name: '机器人', bid: 0, status: false },
        { name: '技能', bid: 1, status: false }
      ],
      isBig: false,
      searchDisabled: true,

      //机器人和技能的下载
      skillDiaVisData: false,
      robotDiaVisData: false,
      title: '下载提示',
      robotTitle: '机器人信息',
      robotName: '',
      robotCode: '',
      skillItem: {},
      nameTitle: '',
      codeTitle: '',
      robotTitle: '',
      robotItem: 'robot-item',
      floatLeft: 'float-left',
      margin: 'margin'
    }
  },
  mounted() {
    if (this.$route.query.type === 0) {
      // 机器人0
      this.type = 0
    } else if (this.$route.query.type === 1) {
      // 技能1
      this.type = 1
    } else {
      this.type = ''
    }

    this.classifyData.map((item, index) => {
      if (item.bid === this.type) {
        this.classifyData[index].status = true
      }
    })
    const self = this
    const call = function() {
      if (self.$route.query.tags !== '') {
        self.itemTagsEvent(self.$route.query.tags)
      }
    }

    if (self.$route.query.bid !== '') {
      this.list.push(self.$route.query.bid)
      this.getSearchListData()
    }

    this.getSearchListData()
    this.getTagData(call)
  },
  methods: {
    getSearchListData() {
      let data
      if (this.isComTrue) {
        data = {
          size: this.page.pageSize,
          current: this.page.pageNum,
          name: this.name,
          useCount: '',
          shelfTime: '',
          list: this.list,
          type: this.type
        }
      } else if (this.isUseTrue) {
        // 使用量 0 升序 1 降序
        data = {
          size: this.page.pageSize,
          current: this.page.pageNum,
          name: this.name,
          useCount: Number(this.useType),
          shelfTime: '',
          list: this.list,
          type: this.type
        }
      } else if (this.isTimeTrue) {
        // 上架时间 0 升序 1 降序
        data = {
          size: this.page.pageSize,
          current: this.page.pageNum,
          name: this.name,
          useCount: '',
          shelfTime: Number(this.timeType),
          list: this.list,
          type: this.type
        }
      }
      searchList(data).then(res => {
        console.log('searchList', res)
        this.robotList = res.list.records
        this.page.totalCount = res.list.total
        this.skillSum = res.skillSum
        this.robotSum = res.robotSum

        this.robotList.map(item => {
          if (item.price) {
            item.price = '¥' + item.price.toFixed(2)
          }
        })
      })
    },
    // 得到标签
    getTagData(callback) {
      const data = {
        groupId: 'tag'
      }
      const self = this
      getTag(data).then(res => {
        console.log('res', res)

        if (res.length > 0) {
          self.tagsData = res.map((item, index) => {
            return { ...item, status: false }
          })
        }
        if (callback) {
          callback()
        }
      })
    },
    // 改变分页的条数
    handleSizeChange(value) {
      this.page.pageSize = value
      this.getSearchListData()
    },
    // 改变分页的当前页面
    handleCurrentChange(value) {
      this.page.pageNum = value
      this.getSearchListData()
    },
    classifyChange(value) {
      this.getSearchListData()
    },
    // 搜索
    search(value) {
      console.log('value123', value)
      this.name = value
      this.page.pageSize = 10
      this.page.pageNum = 1
      this.getSearchListData()
    },
    // 综合排序
    comSortEvent() {
      console.log('综合排序')
      this.isComTrue = true
      this.isUseTrue = false
      this.isTimeTrue = false
      this.getSearchListData()
    },
    // 使用量
    useTypeEvent() {
      this.isComTrue = false
      this.isUseTrue = true
      this.isTimeTrue = false
      this.useType = !this.useType
      this.getSearchListData()
    },
    // 上架时间
    timeTypeEvent() {
      this.isComTrue = false
      this.isUseTrue = false
      this.isTimeTrue = true

      // this.useType = '';
      this.timeType = !this.timeType
      this.getSearchListData()
    },
    // 标签
    itemTagsEvent(value) {
      console.log('value', value)

      this.isPrimary = false

      const dealData = this.tagsData.map((item, index) => {
        if (index === Number(value)) {
          this.tagsData[index].status = !item.status
          console.log('item.status', item.status)
        }
      })
      const filterData = this.tagsData.filter((item, index) => {
        return item.status === true
      })

      const listData = []
      filterData.forEach((item, index) => {
        listData.push(item.bid)
      })

      console.log('listData', listData)
      this.list = listData
      this.getSearchListData()
    },
    // 标签-全部
    allTagsEvent() {
      this.page.pageNum = 1
      this.isPrimary = !this.isPrimary
      if (this.isPrimary) {
        this.tagsData.map((item, index) => {
          return item.status = false
        })
        this.list = []
      }
      this.getSearchListData()
    },
    // 分类
    classifyEvent(value) {
      this.page.pageNum = 1
      this.classifyData.map((item, index) => {
        if (value === index) {
          this.classifyData[index].status = true
          this.type = item.bid
        } else {
          this.classifyData[index].status = false
        }
      })
      this.getSearchListData()
    },
    // 跳转到详情页面
    jumpDetailEvent(item) {
      //        this.$router.push({
      //          name: "Detail",
      //          params: {
      //            bid: item.bid,
      //            item: item,
      //            flag: item.type === 0 ? 'robot':'skill'
      //          }
      //        })

      this.$router.push({
        name: 'Detail',
        query: {
          bid: item.bid,
          flag: item.type === 0 ? 'robot' : 'skill'
        }
      })
    },
    imeDownLoad(item) {
      console.log('item', item);
      //type 为0 下载机器人 type为1下载技能
      let url = window.location.hash;
      sessionStorage.setItem("url",url);
      if (item.type === 1) {
        //this.skillDownLoadFun();
        this.skillDiaVisData = true;
        this.skillItem = item;
      }
      if (item.type === 0) {
        this.robotDownLoadFun(item);
      }
    },
    //下载技能的函数
    skillDownLoadFun(item) {
      const data = {
        orderName: item.name,
        commodityId: item.bid,
        type: 1, // 技能下载 type =2
        //isDefault: item.isDefault,
      }
      download(data).then(res => {
        // this.downLoadFun(res.downloadUrl);
        if (res.code === 10010) {
          this.$message({
            type: 'warning',
            message: res.message
          })
          this.$router.push('/login')
        } else {
          console.log('download', res);
          item.downCount = 1;
          this.robotName = res.name;
          this.robotCode = res.registerCode;
          this.robotDiaVisData = true;
          this.robotTitle = '技能信息';
          this.nameTitle = '技能装配的机器人名称';
          this.codeTitle = '技能装配的机器人关联码';
        }
      })
    },
    //下载机器人的函数
    robotDownLoadFun(item) {
      const data = {
        orderName: item.name,
        commodityId: item.bid,
        type: 2, // 机器人下载 type =2
        isDefault: item.isDefault
      }
      robotDownload(data).then(res => {
        console.log('robotDownload', res)
        // allDownLoad(res.downloadUrl);
        // this.downLoadFun(res.downloadUrl);
        if (res.code === 10010) {
          this.$message({
            type: 'warning',
            message: res.message
          })
          this.$router.push('/login')
        } else {
          console.log('robotDownload---');
          item.downCount = 1;
          this.robotName = res.name;
          this.robotCode = res.registerCode;
          this.robotDiaVisData = true;
          this.robotTitle = '机器人信息';
          this.nameTitle = '创建的机器人名称';
          this.codeTitle = '创建的机器人关联码';
          allDownLoad(res.downloadUrl)
        }
      })
    },

    //技能-确定
    parentSkillYesEvent(value) {
      console.log('parentSkillYesEvent',value);
      this.skillDownLoadFun(value);
      this.skillDiaVisData = false;
    },
    //技能-取消
    parentSkillNoEvent(value) {
      if(value === 'skillNo') {
        console.log('skillNo');
        this.skillDiaVisData = false;
      }
    },
    //点击关闭按钮，关闭对话框
    beforeCloseEvent(value) {
      if(value === 'close') {
        this.skillDiaVisData = false;
      }
    },
    //关闭
    closeEvent(value) {
      if(value === 'robotClose') {
        this.robotDiaVisData = false;
      }
    },
    //点击右上角叉号 关闭弹窗
    robotBeforeCloseEvent(value) {
      if(value === 'rightRobotClose') {
        this.robotDiaVisData = false;
      }
    },
  }
}
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style lang="scss">
  .search-container {
    .margin {
      margin-right: 7px;
    }
    .el-carousel__item h3 {
      color: #475669;
      font-size: 14px;
      opacity: 0.75;
      line-height: 150px;
      margin: 0;
    }

    .el-carousel__item:nth-child(2n) {
      background-color: #99a9bf;
    }

    .el-carousel__item:nth-child(2n+1) {
      background-color: #d3dce6;
    }
    .el-carousel__button {
      width: 10px !important;
    }
    .el-checkbox__label {
      font-size: 12px !important;
    }
    .el-radio__label {
      font-size: 12px !important;
    }
    .el-tag {
      margin-right: 10px !important;
    }
    .el-carousel__item:nth-child(2n+1) {
      background: #fff;
    }
  }
</style>
<style scoped lang="scss">
  .search-container {
    ::-webkit-input-placeholder{
      /* WebKit browsers */
      color: #fff;
    }
    :-moz-placeholder{
      /* Mozilla Firefox 4 to 18 */
      color: #fff;
    }
    ::-moz-placeholder {
      /* Mozilla Firefox 19+ */
      color: #fff;
    }
    :-ms-input-placeholder {
      /* Internet Explorer 10+ */
      color: #fff;
    }
    width: 100%;
    height: 100%;
    margin-top: 60px;
    .search {
      width: 100%;
      background: #eee;
      .search-content {
        display: flex;
        flex-direction: column;
        width: 1180px;
        height: 100%;
        .tags {
          width: 100%;
          background: #fff;
          padding: 10px;
          margin-top: 12px;
          margin-bottom: 6px;
          .tag-group {
            font-size: 12px;
            margin: 5px 0;
          }
        }
        .comprehensive {
          width: 100%;
          margin: 6px 0;
          .com-left {
            .arrow-box {
              position: relative;
              .up-arrow {
                height: 10px;
                position: absolute;
                top: -13px;
                left: 0;
                z-index: 9;
              }
              .down-arrow {
                height: 10px;
                position: absolute;
                top: -7px;
                left: 0;
                z-index: 9;
                margin-top: 3px;
              }
            }
          }
          .com-right {

          }
        }
        .robot-list {
          width: 1180px;
          //flex:1;
          margin-bottom: 6px;
          .list-content {
            /*width: 100%;*/
            height: 100%;
            justify-content: space-between;
            flex-wrap: wrap;
            display: flex;
            .robot-item {
              //width: 49.5%;
              //width: 560px;
              width: 583px;
              //flex: 1;
              //height: 276px;
              margin: 7px 0;
              background: #fff;
              padding: 10px;
              /*box-sizing: border-box;*/
              position: relative;
              .triangle{
                width: 0;
                height: 0;
                border-top: 40px solid #D9CDA3;
                border-left: 40px solid transparent;
                position: absolute;
                top:0;
                right:0;
              }
              .triangle-icon{
                width: 15px;
                height: 15px;
                color: #fff;
                position: absolute;
                top:5px;
                right:5px;
                img {
                  width: 100%;
                  height: 100%;
                }
              }
              .item-down {
                margin-top: 10px;
                display: flex;
                .down-left {
                  width: 188px;
                  height: 160px;
                  //flex: 1;
                }
                .down-right {
                  //flex: 2;
                  flex: 1;
                  padding: 20px;
                  margin-left: 10px;
                  .title {
                    color: #242424;
                    font-size: 16px;
                    padding: 5px 0;
                  }
                  .right-content {
                    padding: 5px 0;
                    font-size: 12px;
                  }
                  .start {
                    margin-top: 22px;
                    padding: 5px 0;
                    .use-count {
                      color: #A8A8A8;
                    }
                  }
                  .status {
                    font-size: 16px;
                    padding: 5px 0;
                  }
                  .search-btn {
                    width:78px;
                    height:32px;
                    border-radius:6px;
                  }
                }
              }
            }
          }
        }
        .paging {
          width: 100%;
          margin-top: 6px;
          margin-bottom: 12px;
          //position: fixed;
          //bottom: 10px;
        }
      }
    }
  }
  .fontSize12 {
    font-size: 12px;
  }
  .marginRight20 {
    margin-right: 20px;
  }
  .floatLeft {
    float: left;
  }
  .selectColor {
    color: #2A5AD7;
  }
</style>
